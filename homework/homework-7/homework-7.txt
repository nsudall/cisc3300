1. What is a class? What is an object? What is OOP?
    A class is a template for creating objects which is reqired in PHP. It defines
    the properties and methods objects created of the class will have. Objects are
    an instance of the class. OOP (object oriented programming) is a programming 
    method that orgainizes code into objects, making it easier to manage and maintain
2. Why use an abstract class in OOP?
    Abstract classes provide high level functionality with details provided by child
    classes. This allows the parent to create defaults for methods.
3. What are superglobals in PHP, what are some examples of data they provide?
    Superglobals are predefined variables and are available in all scopes. The 
    $_SERVER superglobal will hold URI and request method. $_POST superglobal holds
    form data
4. What are the two steps to setting up and using a class via namespaces?
    The first step is to define the namespace in the class. The second step is to 
    invoke the namespace where we want to use the class. This can be done by typing 
    out the namespace everytime we use the class, or import the class with the use
    keyword
5. What is MVC? Detail the different parts.
    MVC is a method of dividing the application into different sections: model, view,
    and controller. Each handel different aspects of the application. Model handels
    adding and retrieving data from the database as the controller cannot access the 
    database directly. Controllers act as a middle man between the model and view 
    sections. The view aspects creates what the user interacts with. It only interacts
    with the controller which then interacts with the model.
6. If I had a resource called users in my application that was designed with RESTFUL URI
design, what would the URI and HTTP verbs be for:
    a. getting all users
        GET
    b. getting one users
        GET
    c. saving a user
        POST
    d. editing a user
        PATCH
    e. deleting a user
        DELETE
7. Create a PHP project in an MVC style. It should have the ability to submit a new note
resource, a note should have a title and a description. The title of the note should be
more than 3 characters long and the description should be more than 10 characters
long. Any special characters should be converted to HTML entities. On the frontend
show a success message if the request is successful and an error message if anything is
wrong. Add some basic styling.
    a. no need for a model class, the validation can happen in a controller method.